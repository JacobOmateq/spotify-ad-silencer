#!/usr/bin/env python3
"""
Generate embedded audio code from existing audio files
Run this script when you have audio files to convert them to embedded base64 data
"""

import os
import sys
import base64
import glob

def encode_audio_file(file_path):
    """Encode a single audio file to base64"""
    try:
        with open(file_path, 'rb') as f:
            audio_data = f.read()
        
        encoded = base64.b64encode(audio_data).decode('utf-8')
        file_size = len(audio_data)
        
        return encoded, file_size
    except Exception as e:
        print(f"Error encoding {file_path}: {e}")
        return None, 0

def generate_embedded_audio_code():
    """Generate Python code with embedded audio files"""
    
    print("üéµ Spotify Ad Silencer - Audio Embedding Generator")
    print("=" * 60)
    
    # Find audio files
    voice_dir = "audio/voice"
    music_dir = "audio/music"
    
    voice_files = []
    music_files = []
    
    if os.path.exists(voice_dir):
        for ext in ['*.mp3', '*.wav', '*.ogg']:
            voice_files.extend(glob.glob(os.path.join(voice_dir, ext)))
    
    if os.path.exists(music_dir):
        for ext in ['*.mp3', '*.wav', '*.ogg']:
            music_files.extend(glob.glob(os.path.join(music_dir, ext)))
    
    if not voice_files and not music_files:
        print("‚ùå No audio files found in audio/voice/ or audio/music/")
        print("Make sure you have audio files before running this script")
        return
    
    print(f"Found {len(voice_files)} voice files and {len(music_files)} music files")
    
    # Generate code
    output_lines = [
        '"""',
        'Embedded audio data for Spotify Ad Silencer',
        'Auto-generated by generate_embedded_audio.py',
        'DO NOT EDIT THIS FILE MANUALLY',
        '"""',
        '',
        'EMBEDDED_VOICE_FILES = {'
    ]
    
    total_size = 0
    
    # Process voice files
    for i, file_path in enumerate(voice_files):
        print(f"Processing voice file: {os.path.basename(file_path)}")
        encoded, size = encode_audio_file(file_path)
        
        if encoded:
            total_size += size
            file_id = f"voice_{i+1}"
            output_lines.append(f'    "{file_id}": (')
            
            # Split long base64 strings into chunks for readability
            chunk_size = 80
            for j in range(0, len(encoded), chunk_size):
                chunk = encoded[j:j+chunk_size]
                output_lines.append(f'        "{chunk}"')
            
            output_lines.append('    ),')
    
    output_lines.append('}')
    output_lines.append('')
    output_lines.append('EMBEDDED_MUSIC_FILES = {')
    
    # Process music files
    for i, file_path in enumerate(music_files):
        print(f"Processing music file: {os.path.basename(file_path)}")
        encoded, size = encode_audio_file(file_path)
        
        if encoded:
            total_size += size
            file_id = f"music_{i+1}"
            output_lines.append(f'    "{file_id}": (')
            
            # Split long base64 strings into chunks for readability
            chunk_size = 80
            for j in range(0, len(encoded), chunk_size):
                chunk = encoded[j:j+chunk_size]
                output_lines.append(f'        "{chunk}"')
            
            output_lines.append('    ),')
    
    output_lines.append('}')
    
    # Write to file
    output_file = "embedded_audio_data.py"
    with open(output_file, 'w') as f:
        for line in output_lines:
            f.write(line + '\n')
    
    print(f"\n‚úÖ Generated {output_file}")
    print(f"üì¶ Total embedded data size: {total_size / 1024:.1f} KB")
    print(f"üéµ Voice files: {len(voice_files)}")
    print(f"üé∂ Music files: {len(music_files)}")
    
    if total_size > 1024 * 1024:  # 1MB
        print("‚ö†Ô∏è  Warning: Large embedded data will increase executable size significantly")
        print("Consider using shorter audio clips or fewer files")
    
    print(f"\nNext steps:")
    print(f"1. Add 'embedded_audio_data.py' to your project")
    print(f"2. Update your PyInstaller build to include embedded audio")
    print(f"3. The executable will now work without external audio files!")

if __name__ == "__main__":
    generate_embedded_audio_code() 